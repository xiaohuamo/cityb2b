<?php

class ctl_statement extends cmsPage
{
    function ctl_statement()
    {

        parent::cmsPage();



        $act = $GLOBALS['gbl_act'];

        if ($act == 'customer_coupon_approving' || $act == 'customer_order_detail') {

        } else {

            if (! $this->loginUser) {
                $this->sheader(HTTP_ROOT_WWW.'member/login?returnUrl='.urlencode($_SERVER['REQUEST_URI']));
            }
        }


    }

    /*
     生成商家的客户的statement
     * */
    public function generate_customer_temp_statement($customer_id,$data,$startTime,$endTime)
    {

        $mdl_statement_list = $this->loadModel('statement_list');
        $mdl_statement = $this->loadModel('statement');


        // 获得登陆用户管理的 供应商商家
        $mdl_user_factory = $this->loadModel('user_factory');
        $factoryId = $this->current_business['id'];

        // var_dump('here');exit;

        /*
        生成statement 的处理过程
        1） 获得当前statement 的 年度星期 如 202138 代表2021年第38周。 检测当前客户是否已经有该年度星期值的数据，如果已经存在，则不再生成。
        2） 从 statement 表中，拿出所有 未 settle的数据， 开始生成statement_list 的数据表信息。包括这次statment 包含的statement表格的数据id
        3) 将statement 的 生成信息写入数据库。
        */


            // lock record this customer data

            // get opening balance
            $data_count =sizeof($data);
            $openBalance =$data[$data_count-1]['balance_due'];



            // 检查是否有退货，如果有退货则对该退货进行清算 ，清算之后，将该退货标为不可再更改。 清算之后，再生成statment 就不需要再次计算。
            // 比如有一笔退货 settle =0 ，且没有 statement id ，则直接写清算记录。 这个退货的代码为 xxxxx
            // process all customer refund code 2002



            //      $mdl_statement->updatePaymentsDetails(0,0.00,$factory_user,$login_user){

            //生成statament 的时候 会有一个close balance ,每次清算会有一笔，是 + debit -credit ,做为本次 closebalance 和下次opening balance .




            // var_dump($openBalance);exit;
            // get closeing balance
            $mdl_statement->changeStatementData($factoryId,$value['customer_id'],-1);
            $closeBalance = $mdl_statement->getCustomerCloseingBalanceAndData($factoryId,$value['customer_id']);
            //  label all statment detail is process

            //   var_dump($closeBalance);exit;
            // lock the data

            $statementData = $mdl_statement->getStatementData($factoryId,$value['customer_id'],$this->loginUser['id'],$openBalance,$closeBalance);
            // var_dump($statementData);exit;

            $new_statement_id = $mdl_statement_list->insert($statementData);
            if($new_statement_id){

                $dataOfstatement = array(
                    'statement_id'=>$new_statement_id,
                    'process_status'=>1
                );

                $where =array(
                    'factory_id'=>$factoryId,
                    'customer_id'=>$value['customer_id'],
                    'statement_id'=>0,
                    'process_status'=>-1
                );

                $mdl_statement->updateByWhere($dataOfstatement,$where);

            }


            //      var_dump($dataOfstatement_id);exit;


        $this->setData('generate_statement', 'submenu_top');
        $this->setData('statement_list', 'submenu');
        $this->setData('account_management', 'menu');
        $this->display('statement/statement_list');

    }


    /*
     生成商家的客户的statement
     * */
    public function generate_statement_action()
    {

        $mdl_statement_list = $this->loadModel('statement_list');
        $mdl_statement = $this->loadModel('statement');


        // 获得登陆用户管理的 供应商商家
        $mdl_user_factory = $this->loadModel('user_factory');
        $factoryId = $mdl_user_factory->getFactoryId($this->loginUser['id']);

        // var_dump('here');exit;

        /*
        生成statement 的处理过程
        1） 获得当前statement 的 年度星期 如 202138 代表2021年第38周。 检测当前客户是否已经有该年度星期值的数据，如果已经存在，则不再生成。
        2） 从 statement 表中，拿出所有 未 settle的数据， 开始生成statement_list 的数据表信息。包括这次statment 包含的statement表格的数据id
        3) 将statement 的 生成信息写入数据库。
        */

        $mdl_user_factory =$this->loadModel("user_factory");







        // 获得当前供应商需要生成statement 的客户列表
        $needToProcessCustomerList = $mdl_statement_list->getNeedToProcessStatementCustomerList($factoryId);

        //依次生成statement

     //   var_dump($needToProcessCustomerList);exit;

        foreach ($needToProcessCustomerList as $key => $value) {


            // lock record this customer data

            // get opening balance
           $openBalance = $mdl_statement_list->getCustomerOpeningBalance($factoryId,$value['customer_id']);



         // 检查是否有退货，如果有退货则对该退货进行清算 ，清算之后，将该退货标为不可再更改。 清算之后，再生成statment 就不需要再次计算。
         // 比如有一笔退货 settle =0 ，且没有 statement id ，则直接写清算记录。 这个退货的代码为 xxxxx
        // process all customer refund code 2002



      //      $mdl_statement->updatePaymentsDetails(0,0.00,$factory_user,$login_user){

          //生成statament 的时候 会有一个close balance ,每次清算会有一笔，是 + debit -credit ,做为本次 closebalance 和下次opening balance .




        // var_dump($openBalance);exit;
            // get closeing balance
            $mdl_statement->changeStatementData($factoryId,$value['customer_id'],-1);
            $closeBalance = $mdl_statement->getCustomerCloseingBalanceAndData($factoryId,$value['customer_id']);
            //  label all statment detail is process

          //   var_dump($closeBalance);exit;
            // lock the data

            $statementData = $mdl_statement->getStatementData($factoryId,$value['customer_id'],$this->loginUser['id'],$openBalance,$closeBalance);
       // var_dump($statementData);exit;

            $new_statement_id = $mdl_statement_list->insert($statementData);
            if($new_statement_id){

                $dataOfstatement = array(
                    'statement_id'=>$new_statement_id,
                    'process_status'=>1
                );

                $where =array(
                    'factory_id'=>$factoryId,
                    'customer_id'=>$value['customer_id'],
                    'statement_id'=>0,
                    'process_status'=>-1
                );

             $mdl_statement->updateByWhere($dataOfstatement,$where);

            }


            //      var_dump($dataOfstatement_id);exit;

        }
        $this->setData('generate_statement', 'submenu_top');
        $this->setData('statement_list', 'submenu');
        $this->setData('account_management', 'menu');
        $this->display('statement/statement_list');

    }

    public function statement_view_action() {

        $id =  get2('id');
        $currentStatementRec = $this->loadModel('statement_list')->get($id);

        var_dump($currentStatementRec);exit;


        if($currentStatementRec) {
            //var_dump($currentStatementRec['statement_ids']);exit;

            if($currentStatementRec['factory_id'] != $this->current_business['id'] && $currentStatementRec['customer_id'] !=$this->loginUser['id']) {
                $this->form_response_msg('no access!');
            }
            $statement_details_data = $this->loadModel('statement')->getStatementDetailsById($id);
          // var_dump($statement_details_data);exit;
         //  $statement_details_data_over_due = $this->loadModel('statement')->getStatementDetailsOverDue($currentStatementRec['statement_ids'],$currentStatementRec['gen_date']);

        }else{
            $this->form_response_msg('Could not find the record!');
        }


        $mel_user = $this->loadModel('user');
        $mdl_abn_application = $this->loadModel('wj_abn_application');
        $mdl_user_account_info = $this->loadModel('user_account_info');



        $user =$mel_user->getUserById($currentStatementRec['customer_id']);
        $userWhere = [
            'userId' => $currentStatementRec['customer_id'],
        ];
        $userABN = $mdl_abn_application->getByWhere($userWhere);
//var_dump($order['userId']);exit;

        $factory = $mel_user->getUserById($currentStatementRec['factory_id']);
        $factoryWhere = [
            'userId' => $currentStatementRec['factory_id'],
        ];
        $factoryAccount = $mdl_user_account_info->getByWhere($factoryWhere);
        $factoryABN = $mdl_abn_application->getByWhere($factoryWhere);

        // 获得该用户的简称
        $mdl_user_factory =$this->loadModel("user_factory");
        $user_code_rec =$mdl_user_factory->getByWhere(array('user_id'=>$currentStatementRec['customer_id'],'factory_id'=>$currentStatementRec['factory_id']));
        //var_dump($user_code_rec);exit;

        $this->loadModel('statement_output');
        $report = new customer_statement($currentStatementRec,$statement_details_data);


        if($this->loginUser['logo']) {
            $report->logoPath('data/upload/' . $this->current_business['logo']);
        }


        $report->setUser_Code($user_code_rec);
        $report->setUser($user, $userABN);
        $report->setFactory($factory, $factoryABN, $factoryAccount);
        $report->setStatementDetailsData($statement_details_data);
        $report->setStatementData($currentStatementRec);


        $report->title('Statement');



        $report->generatePDF($this->lang);

        $filePath = date('Y-m');
        $fileName =$filePath.'-'.$currentStatementRec['customer_id'].'-'.$currentStatementRec['id'].'.pdf';


        $report->outPutToBrowser($fileName);

        $this->file->createdir('data/statement/'.$filePath);

         if($filePath) {//如果是系统内部调用会直接在指定路径创建文件
             $report->outPutToFile('data/statement/'.$filePath.'/'.$fileName);
             return $filePath;
         }
       // $report->outPutToFile('data/statement/'.$filePath.'/'.$order['userId'].'-'.$currentStatementRec['id'].".pdf","F");
        exit;


    }

    public function statement_custom_action(){


        $mdl_statement = $this->loadModel('statement');
        $mdl_user_factory = $this->loadModel('user_factory');

        $factoryId =  $this->current_business['id'];
        $factoryList = $mdl_user_factory->getUserFactoryList($this->current_business['id'],null,0);
        $this->setData($factoryList, 'factoryUsers');
        $this->setData('statement_custom', 'submenu_top');
        $this->setData('statement_list', 'submenu');
        $this->setData('account_management', 'menu');
        $this->setData('Custom Statement - Business Center' . $this->site['pageTitle'], 'pageTitle');

        if(is_post()) {

            $customer_id = post('customer_id');
            $startTime=post('startTime');
            $endTime=post('endTime');
            $this->setData($startTime, 'startTime');
            $this->setData($endTime, 'endTime');
            $this->setData($customer_id, 'customer_id');
            if (!$customer_id) {
                //  var_dump($customer_id);exit;
                //$this->form_response(600, 'please select customer !');
                $this->display('statement/statement_custom');

            }
        }else{
                $customer_id=get2('customer_id');
                $startTime=get2('startTime');
                $endTime=get2('endTime');
                $this->setData($startTime, 'startTime');
                $this->setData($endTime, 'endTime');
             }
            $this->setData($customer_id,'customer_id');
             $search = trim(get2('search'));
             $this->setData($search, 'search');

            $data = $mdl_statement->getStatementTranscations($factoryId, $customer_id,$search,$startTime,$endTime);
           // var_dump($data);exit;
            $this->setData($data, 'data');
            $this->display('statement/statement_custom');

          //  $this->form_response(200, '',HTTP_ROOT_WWW . 'statement/statement_custom');








    }

    public function transcation_list_action() {

        $mdl_statement = $this->loadModel('statement');
        $mdl_user_factory = $this->loadModel('user_factory');

        $search = trim(get2('search'));

        $customer_id=get2('customer_id');
        $this->setData($customer_id,'customer_id');

        $factoryId =  $mdl_user_factory->getFactoryId($this->loginUser['id']);
        // var_dump($factoryId);exit;


        $data = $mdl_statement->getStatementTranscations($factoryId, $customer_id,$search);
        //var_dump($data);exit;

        foreach ($data as $key => $value) {



        }

        $this->setData($search, 'search');
        $this->setData($data, 'data');

        $this->setData('statement_list', 'submenu');
        $this->setData('account_management', 'menu');
        $this->display('statement/transcation_list');
    }

    public function statement_list_action() {

        $mdl_statement_list = $this->loadModel('statement_list');
        $mdl_user_factory = $this->loadModel('user_factory');

        $search = trim(get2('search'));


        $factoryId =  $mdl_user_factory->getFactoryId($this->loginUser['id']);
       // var_dump($factoryId);exit;


        $data = $mdl_statement_list->getStatementList($factoryId, $search);
       // var_dump($data);exit;

        foreach ($data as $key => $value) {



        }

        $this->setData($search, 'search');
        $this->setData($data, 'data');

        $this->setData('statement_list', 'submenu_top');

        $this->setData('statement_list', 'submenu');
        $this->setData('account_management', 'menu');
        $this->display('statement/statement_list');
    }


}